@startuml Governance_Proposal_Creation_Sequence
!theme plain

title Cura - Diagramme de Séquence : Création de Proposition de Gouvernance

actor "Utilisateur" as User
participant "Interface Web\n(GovernanceForm)" as Frontend
participant "API Backend\n(Express)" as Backend
participant "Middleware JWT\n(Validation)" as JWTMiddleware
participant "Base de Données\n(Supabase)" as Database
participant "Service Blockchain\n(GovernanceService)" as Blockchain
participant "Smart Contract\n(GovernanceFactory)" as Factory
participant "Contrat Proposal\n(Déployé)" as ProposalContract

== Phase de Saisie ==
User -> Frontend : Accès section "Gouvernance"
Frontend -> Frontend : Vérification authentification
User -> Frontend : Clic "Créer une proposition"
User -> Frontend : Saisie des informations
note right
Titre, description, type,
durée de vote, critères
end note
Frontend -> Frontend : Validation côté client
User -> Frontend : Soumission du formulaire

== Phase de sauvegarde en base de données ==
Frontend -> Backend : POST /api/governance/proposals
note right
Authorization: Bearer <JWT_TOKEN>
Body: { title, description, 
proposalType, votingDuration,
criteria, walletAddress }
end note

Backend -> JWTMiddleware : Validation JWT token
JWTMiddleware -> Backend : Token valide + user info
Backend -> Backend : Validation données + autorisation gouvernance
Backend -> Database : INSERT governance_proposals (status='draft')
Database -> Backend : Retour proposal_id
Backend -> Frontend : Réponse { proposal: {...} }

== Phase de déploiement Blockchain ==
Frontend -> Backend : POST /api/governance/{id}/deployment
note right
Authorization: Bearer <JWT_TOKEN>
end note
Backend -> JWTMiddleware : Validation JWT token
JWTMiddleware -> Backend : Token valide + autorisation
Backend -> Blockchain : deployProposal(proposalParams)
Blockchain -> Factory : createProposal(title, description, votingPeriod, ...)
Factory -> ProposalContract : new Proposal(title, criteria, votingLogic, token)
note right
Déploie un contrat Proposal individuel
avec logique de vote et critères
end note
ProposalContract -> Factory : Retour address(Proposal)
Factory -> Blockchain : event ProposalCreated(proposalId, proposalAddress)
Blockchain -> Backend : { proposalId, proposalAddress, txHash }
Backend -> Database : UPDATE (status='active', contract_address, tx_hash)
Backend -> Frontend : Réponse déploiement
Frontend -> User : Confirmation avec lien Etherscan

== Gestion d'Erreurs ==
alt Token JWT invalide/expiré
    JWTMiddleware -> Backend : Erreur 401 - Non autorisé
    Backend -> Frontend : HTTP 401 - Token invalide
    Frontend -> User : "Session expirée, reconnectez-vous"
else Permissions gouvernance insuffisantes
    Backend -> Frontend : HTTP 403 - Non autorisé
    Frontend -> User : "Droits de gouvernance requis"
else Échec déploiement blockchain
    Blockchain -> Backend : Erreur déploiement
    Backend -> Database : DELETE proposal (rollback)
    Backend -> Frontend : Erreur 500
    Frontend -> User : "Déploiement échoué, réessayez"
else Erreur validation
    Backend -> Frontend : HTTP 400 - Données invalides
    Frontend -> User : Message d'erreur
end

@enduml